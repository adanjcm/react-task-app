Despliegue Github Pages

cancelamos la consola. (ctrl+c, 2 veces)

pasos:

Cuando hemos terminado de desarrollar 

1. ejecutamos el comando 

npm run build

esto va a generar nuestro proyeto para produccion
y simplement convierte todo nuestro codigo de CSS 
y javascript a archivos finales.

* si voy a "index.html" vamos a ver que esta todo 
el contenido convertido (carpeta dist)

lo unico que tengo es desplegar estos archivos
para desplegarlo lo que tienen aqui son archivos estaticos
(carpeta dist)
entonces pueden utilizar cualquier servicio de despliegue 
de archivos estaticos, incluso pueden utilizar un hosting compartido

** En mi caso voy a estar utilizando un servicio gratuito,
Github pages, ahi puedes subir sus portafolios o aplicaciones generadas con "frameworks".

2. crear un repositorio en Github
[ https://github.com/adanjcm/react-task-app ]

3. subimos el codigo al repositorio de Github

git init    (inicializamod el proyecto)

git add .   (anadimos los archivos a subir)

git commit -m "first commit"    (primer commit)

4. lo subimos a Github

git remote add origin https://github.com/adanjcm/react-task-app.git 

git push origin master (origin repositorio de github, 
                        master es la rama de desarrollo)

* Actualizo Github y aparace el codigo                    

5. para poder desplegarlo en Github pages, 
lo unico que necesitamos es utilizar este repositorio,
Github pages se tiene que configurar con una serie de pasos,
pero hay un paquete de npm "gh-pages"
[ https://www.npmjs.com/package/gh-pages ]

Este paquete lo que hace es desplegar archivos estaticos que 
ya esten configurados 

copiamos el comando y lo instalamos en consola:
npm install gh-pages --save-dev

Lo que va hacer es que va a instalar en el "package.json"
un nuevo paquete "gh-pages".

* y para utilizarlo simplemente voy a crear un comando nuevo en "scripts":

"scripts": {
  "deploy": "gh-pages -d dist" (nombre de la carpeta que 
                                quiero subir)
}

* guardamos y ya esta.


6. para poder desplegar esto vamos a vitejs
[https://vitejs.dev/guide/static-deploy.html]
porque tiene una serie de pasos para desplegar,
pero escogemos la de "Github Pages" 

Primero tienes que establecer esto:

* nos vamos "vite.config.js" y que establesca una propiedad llamada "base"


[vite.config.js - original]

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})

* si estas desplegando 
(If you are deploying to https://<USERNAME>.github.io/, you can omit base as it defaults to '/') 
esto se utiliza para desplegar por ejemplo un proyecto de "front" pero para colocarlo como tu perfil de github. coloca un (/)

* Pero si estas desplegando que seria un repo,
que seria nuestro caso, utiliza una direccion como esta
(nombre de usuario/repo)
(If you are deploying to https://<USERNAME>.github.io/<REPO>/, for example your repository is at https://github.com/<USERNAME>/<REPO>, then set base to '/<REPO>/'.)

copiamos ('/<REPO>/') [aqui va el nombre del repo, 
                        react-task-app]

[vite.config.js - configurado]

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  base: '/react-task-app/'
})


** finalmente me dice que cree un archivo "deploy.sh"
dentro del proyecto (raiz)
y pegue todo este codigo,

pero luego me dice en comentarios, si tu estas desplegando 
tu proyecto como un un usario utiliza esto:
[
# if you are deploying to https://<USERNAME>.github.io
# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git main
]

si estas desplegando tu proyeco como un repo utiliza esto:
[
# git push -f git@github.com:<USERNAME>/<REPO>.git main:gh-pages
]

-- Descomento esto del repo y le coloco el nombre de usario/nombre del repo 
[ git push -f git@github.com:adanjcm/react-task-app.git main:gh-pages ]


[deploy.sh -configurado]

#!/usr/bin/env sh

# abort on errors
set -e

# build
npm run build

# navigate into the build output directory
cd dist

# place .nojekyll to bypass Jekyll processing
echo > .nojekyll

# if you are deploying to a custom domain
# echo 'www.example.com' > CNAME

git init
git checkout -B main
git add -A
git commit -m 'deploy'

# if you are deploying to https://<USERNAME>.github.io
# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git main

# if you are deploying to https://<USERNAME>.github.io/<REPO>
git push -f git@github.com:adanjcm/react-task-app.git main:gh-pages

cd -

** Guardamos 

7. y tenemos que hacer un "build"

npm run build 
(para nuevamente construirlo con estas confiraciones que hemos hecho)

lo unico que hace cuando hacemos el npm run build,
esta configuracion que hemos anadido,
si vemos el html en la carpeta "dist" 
que es el "hmtl" de produccion pueden ver que le coloca
una especie de script.

[ < script type="module" crossorigin src="react-task-app/assets/index.ff83e7f9.js"> </script> ]

que es lo que necesita Github pages para funcionar.

** con esto ya estaria.



8. por ultimo desde consola digo:

npm run deploy  (esto va a empezar a subir mi proyecto)

[published]

9. refresco el repositorio de Github y voy a "settings"
- Pages - y me da un recuadro (your site is live at https://adanjcm.github.io/react-task-app/) --> le doy click 
y carga mi aplicacion, tarda un poco. 

si lo tienes publico, puedes compartir la url. 

Nota: de esta forma hemos creado una aplicacion sencilla utilizando react y ya estaria desplegado, no hay mas. 

Apartir de aqui si quieren conocer mas de react,
tendrian que investigar codigo de backend y como integrarle por ejemplo la posibilidad de utilizar APIs y demas,

este ejemplo solo ha sido de react.

SOLUCION A ERROR (error por ancho de banda insuficiente): 

error: RPC failed; curl 18 transfer closed with outstanding read data remaining
send-pack: unexpected disconnect while reading sideband packet
fatal: the remote end hung up unexpectedly
Everything up-to-date


➜  react-tasks-application git:(main) git config --global http.version HTTP/1.1    

➜  react-tasks-application git:(main) git config --global http.postBuffer 157286400

** luego de que se suba regresar al HTTP 2

➜  react-tasks-application git:(main) git config --global http.version HTTP/2      



